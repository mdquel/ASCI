@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Toolbelt.Blazor.SpeechRecognition
@inject NavigationManager NavigationManager
@inject SpeechRecognition SpeechRecognition
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<br>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<br /> 
<button @onclick="Send" disabled="@(!IsConnected)">Enviar</button>
<button @onclick="OnClickStart" disabled="@(IsListening)">Iniciar</button>
<button @onclick="OnClickStop" disabled="@(!IsListening)">stop</button>

<hr>
<div>
    @foreach (var result in this.Results)
    {
        if (result.IsFinal)
        {
            <text>@result.Items[0].Transcript</text>
        }
        else
        {
            <i style="color:#ddd;">@result.Items[0].Transcript</i>
        }
    }
</div>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <ul>@message</ul>
    }
</ul>

@code {
    SpeechRecognitionResult[] Results = new SpeechRecognitionResult[0];
    bool IsListening = false;



    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        this.SpeechRecognition.Lang = "es-ES";
        this.SpeechRecognition.InterimResults = true;
        this.SpeechRecognition.Continuous = true;
        this.SpeechRecognition.Result += OnSpeechRecognized;
        this.SpeechRecognition.End += OnSpeechEnded;


        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async void OnSpeechRecognized(object sender, SpeechRecognitionEventArgs args)
    {
        this.Results = args.Results.Skip(args.ResultIndex).ToArray();
        this.StateHasChanged();
        foreach (var result in this.Results)
        {
            if (result.IsFinal)
            {
                await hubConnection.SendAsync("SendMessage", userInput, result.Items[0].Transcript);
            }
        }
    }

    private async Task OnClickStart()
    {
        if (!this.IsListening)
        {
            this.IsListening = true;
            await this.SpeechRecognition.StartAsync();
        }
    }

    private async Task OnClickStop()
    {
        if (this.IsListening)
        {
            this.IsListening = false;
            await this.SpeechRecognition.StopAsync();
        }
    }

    private void OnSpeechEnded(object sender, EventArgs args)
    {
        if (this.IsListening)
        {
            this.IsListening = false;
            this.StateHasChanged();
        }
    }

    public void Dispose()
    {
        this.SpeechRecognition.Result -= OnSpeechRecognized;
        this.SpeechRecognition.End -= OnSpeechEnded;
    }


}